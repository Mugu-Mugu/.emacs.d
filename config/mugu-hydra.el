(require 'hydra)
;; allows to generate hydra with autogenerated predictible column docstrings
;; it was copied and adapted from AnthonyDiGirolamo on issue 147 of hydra on github

(defun amd/hydra-column-hint (column-groups)
  "Generate a hydra hint string from a list of COLUMN-GROUPS."
  (require 's)
  (require 'dash)
  (let* ((column-strings
          ;; collect the key and name string for each hydra head
          ;; fill columns to the same height with the "^^" string
          (apply #'-pad (cons '("^^" " ")
                              (-map (lambda (column-group)
                                      (-map (lambda (column-head)
                                              ;; get the strings defined in this head
                                              (setq h (-filter 'stringp column-head))
                                              ;; surround the key string with underscores
                                              (if (equal nil h)
                                                  (list "^^" " ")
                                                (list (s-concat "_" (-first-item h) "_") (-last-item h)))
                                              )
                                            column-group))
                                    column-groups))))
         ;; get the max key string width for each column
         (max-key-widths
          (-map (lambda (column-group)
                  (-max
                   (-map (lambda (column-head)
                           (length (-first-item column-head)))
                         column-group)))
                column-strings))
         ;; get the max name string width for each column
         (max-name-widths
          (-map (lambda (column-group)
                  (-max
                   (-map (lambda (column-head)
                           (length (-last-item column-head)))
                         column-group)))
                column-strings)))

    ;; build the hint string starting with a "\n"
    (let ((hint "\n"))
      ;; for each row
      (-each (-iterate '1+ 0 (length (car column-strings)))
        (lambda (row-index)
          ;; get the current row
          (setq row (-select-column row-index column-strings))
          ;; append the new row
          (setq hint
                (concat
                 hint
                 (s-join "  " ;; join the colums
                         (--map (s-join "  " it) ;; join the key and name strings â†’
                                (-zip-with 'list
                                           ;; right-pad the key string with the max key string width for this column
                                           (-map (lambda (pair)
                                                   (s-pad-right (-first-item pair) " " (-last-item pair)))
                                                 (-zip-with 'list max-key-widths (-select-column 0 row)))
                                           ;; right-pad the name string with the max name string width for this column
                                           (-map (lambda (pair)
                                                   (s-pad-right (-first-item pair) " " (-last-item pair)))
                                                 (-zip-with 'list max-name-widths (-select-column 1 row))
                                                 ))))
                 "\n" ))))
      hint)))
;; hydra hack
;; still not really satisfying as this is not compatible with all the features (for instance inheriting head doesnt work and must rely on another hack -.-')
;; it could have been function rather than macro but this way its almost compatible with the original invocation
;; still its not possible without reimplementing hydra or at least some part of it 
(defmacro mugu/defhydra (name body docstring heads-with-columns)
  "Create an hydra with an automatically generated matrix docstring.
It takes the same argument as the original one with following differences: 
All arguments are mandatory
DOCSTRING will be prepended to the generated docstring matrix. It can thus be used as a table header of sorts
HEADS_WITH_COLUMS must be a list of group of heads or a symbol with the same content"
  (let ((heads (cond ((sequencep heads-with-columns) heads-with-columns)
                     (t (eval heads-with-columns)))))
    `(defhydra 
       ,name
       ,body
       (concat ,docstring ,(amd/hydra-column-hint heads))
       ,@(-flatten-n 1 (-map (lambda (column-group)
                               (--filter (not (null it))
                                         (-map (lambda (column-head)
                                                 (-remove-last 'stringp column-head))
                                               column-group)))
                             (-clone heads))))))

(defmacro mugu/defhydra-merged (name body docstring &rest heads)
  "Create an hydra from a list of heads
It takes the same argument as the original one with following differences: 
All arguments are mandatory
DOCSTRING will be prepended to the generated docstring matrix.
HEADS must be 1 or more heads grouped by column and acceptable by `mugu/defhydra"
  `(mugu/defhydra ,name ,body ,docstring ,(-flatten-n 1 (mapcar (lambda (head) (eval head)) heads))))


(provide 'mugu-hydra)
