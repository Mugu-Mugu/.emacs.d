;;; Package --- Summary
;; Enable fast and truly async recursive file or directory search.
;;; Commentary:

;;; Code:
(require 'ivy)
(require 'counsel)

(defvar mugu-counsel-recursive-history
  nil
  "History for recursive reading.")
(defvar mugu-counsel-recursive-temp-file
  (expand-file-name (concat temporary-file-directory "mugu_recursive_tmp_buffer"))
  "History for recursive reading.")

(defun mugu--ivy-filter-results (user-input-str temp-source-file source-proc)
  "Dynamic async source for ivy.
The source is generated by filtering USER-INPUT-STR on the content of
TEMP-SOURCE-FILE.  The source is refreshed every second as long as SOURCE-PROC
is alive."
  (let ((regex (counsel-unquote-regex-parens
                (setq ivy--old-re
                      (ivy--regex user-input-str)))))
    (with-temp-buffer
      (buffer-disable-undo)
      (call-process-shell-command
       (format "grep -iE \"%s\" %s" regex temp-source-file)
       nil t nil)
      (let ((cands (split-string (buffer-string) counsel-async-split-string-re t)))
        (when (process-live-p source-proc)
          (run-at-time "1 sec" nil 'mugu--ivy-refresh-filter-results user-input-str temp-source-file source-proc))
        (if cands
            cands
          (list "no match"))))))

(defun mugu--ivy-refresh-filter-results (user-input-str temp-source-file source-proc)
  "Reperform ivy completion according to USER-INPUT-STR.
Same semantic as `mugu--ivy-filter-results' for TEMP-SOURCE-FILE and SOURCE-PROC"
  (when (and (minibufferp)
             (equal ivy-text user-input-str))
    (ivy--insert-minibuffer
     (ivy--format
      (ivy--sort-maybe
       (setq ivy--all-candidates (mugu--ivy-filter-results user-input-str temp-source-file source-proc)))))))

(defun mugu-counsel--read-recursive (f-or-d starting-directory)
  "Read a directory or a file recursivly and asynchronously.
F-OR-D is a char f or d that determine whether a file or a dir is searched.
It defaults to f. STARTING-DIRECTORY is the directory from which the recursive
search is done.  It defaults to default directory."
  (let* ((default-directory starting-directory)
         (base-prompt "Recursive find (%d/%d")
         (proc-find-item (start-process-shell-command
                          "mugu" "mugu"
                          (format "find * -type %s -not -path '*\/.git*' >%s  2>/dev/null"
                                  f-or-d
                                  mugu-counsel-recursive-temp-file))))
    (ivy-set-prompt 'mugu-counsel-recursive-find
                    `(lambda () (concat ,base-prompt "++)  ")))
    (set-process-sentinel proc-find-item
                          (lambda (proc event)
                            (ivy-set-prompt 'mugu-counsel-recursive-find
                                            (lambda () (concat base-prompt ")  ")))))
    (ivy-read "Recursive find: "
              `(lambda (user-input-str)
                 (mugu--ivy-filter-results user-input-str ,mugu-counsel-recursive-temp-file ,proc-find-item))
              ;; (split-string
              :dynamic-collection t
              :history 'mugu-counsel-recursive-history
              
              :unwind (lambda ()
                        (when proc-find-item
                          (delete-process proc-find-item)))
              :caller 'mugu-counsel-recursive-find)))

(defun mugu-counsel-read-recursive-dir (&optional starting-directory)
  "Read a directory recursivly and asynchronously.
STARTING-DIRECTORY is the directory from which the recursive search is done.
It defaults to default directory.
Return the absolute path of selected directory"
  (interactive)
  (let ((starting-directory
         (or starting-directory default-directory)))
    (expand-file-name (mugu-counsel--read-recursive "d" starting-directory) starting-directory)))

(provide 'mugu-counsel)
;;; mugu-counsel ends here
